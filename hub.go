package goaxis

import (
    "fmt"
)

type hub struct {
    module string
    response ICallback

    // inputCh is for AsyncPush
    inputCh chan interface{}

    // outputCh is for AsyncPull
    outputCh chan interface{}
}

func newHub(module string, rsp ICallback) IHub {
    return &hub{module: module, response: rsp}
}

func (p *hub) Caller(names ...string) ICaller {
    return newCaller(p.module).Push(names...)
}

// request by sync, example: module A get data from module B
func (p *hub) SyncPull(caller ICaller, ds IDataSet) error {
    if ds == nil {
        return fmt.Errorf("SyncPull failed with invalid param, ds: %+v", ds)
    }
    return p.response.Pull(C_Mode_Sync, caller, ds)
}

// request by async, example: websocket module A wait data to send from a channel generated by module B
func (p *hub) ASyncPull(caller ICaller, ds IDataSet) error {
    if ds == nil {
        return fmt.Errorf("ASyncPull failed with invalid param, ds: %+v", ds)
    }

    waitSetCh := make(chan byte, 1)
    var ptrWaitSetCh *chan byte = &waitSetCh
    ds.(*dataSet).ResetHookForGet(func(v IValue) error {
        if ptrWaitSetCh != nil && *ptrWaitSetCh != nil {
            <- *ptrWaitSetCh
            close(*ptrWaitSetCh)
            *ptrWaitSetCh = nil
        }
        return nil
    })

    go func() {
        p.response.Pull(C_Mode_ASync, caller, ds)
        if ptrWaitSetCh != nil && *ptrWaitSetCh != nil {
            *ptrWaitSetCh <- byte(0)
        }
    }()
    return nil
}

// broadcast data to others module, example: websocket module A broadcast data once receive something from network
func (p *hub) SyncPush(caller ICaller, ds IDataSet) error {
    return p.response.Push(C_Mode_Sync, caller, ds)
}

// broadcast data to others module, example: websocket module A broadcast data once receive something from network
func (p *hub) ASyncPush(caller ICaller, ds IDataSet) error {
    go p.response.Push(C_Mode_ASync, caller, ds)
    return nil
}


